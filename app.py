import streamlit as st
import json
from openai import OpenAI
from datetime import datetime
import time
import markdown  # ƒë·ªÉ render Markdown

# ===============================
# üîπ C·∫•u h√¨nh DeepSeek API
# ===============================
client = OpenAI(
    api_key=os.environ.get("DEEPSEEK_API_KEY"),
    base_url="https://api.deepseek.com"
)

# ===============================
# üîπ Load d·ªØ li·ªáu OCR
# ===============================
with open("ocr_text.json", "r", encoding="utf-8") as f:
    ocr_data = json.load(f)

# ===============================
# üîπ C·∫•u tr√∫c ch∆∞∆°ng - m·ª•c
# ===============================
chapter_structure = {
    "Ch∆∞∆°ng 1: Kh√°i lu·∫≠n v·ªÅ Tri·∫øt h·ªçc v√† Tri·∫øt h·ªçc M√°c - L√™nin": {
        "I. Tri·∫øt h·ªçc v√† v·∫•n ƒë·ªÅ c∆° b·∫£n c·ªßa tri·∫øt h·ªçc": (10, 47),
        "II. Tri·∫øt h·ªçc M√°c - L√™nin v√† vai tr√≤ c·ªßa tri·∫øt h·ªçc M√°c - L√™nin trong ƒë·ªùi s·ªëng x√£ h·ªôi": (47, 115),
    },
    "Ch∆∞∆°ng 2: Ch·ªß nghƒ©a duy v·∫≠t bi·ªán ch·ª©ng": {
        "I. V·∫≠t ch·∫•t v√† √Ω th·ª©c": (116, 181),
        "II. Ph√©p bi·ªán ch·ª©ng duy v·∫≠t": (181, 256),
        "III. L√Ω lu·∫≠n nh·∫≠n th·ª©c": (256, 282),
    },
    "Ch∆∞∆°ng 3: Ch·ªß nghƒ©a duy v·∫≠t l·ªãch s·ª≠": {
        "I. H·ªçc thuy·∫øt h√¨nh th√°i kinh t·∫ø - x√£ h·ªôi": (283, 328),
        "II. Giai c·∫•p v√† d√¢n t·ªôc": (328, 383),
        "III. Nh√† n∆∞·ªõc v√† c√°ch m·∫°ng x√£ h·ªôi": (383, 418),
        "IV. √ù th·ª©c x√£ h·ªôi": (418, 446),
        "V. Tri·∫øt h·ªçc v·ªÅ con ng∆∞·ªùi": (446, 488),
    },
}

st.set_page_config(page_title="üí¨ Chatbot Tri·∫øt h·ªçc M√°c - L√™nin", layout="wide")

# ===============================
# üîπ Session state
# ===============================
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if "section_state" not in st.session_state:
    st.session_state.section_state = {}

if "chat_input_temp" not in st.session_state:
    st.session_state.chat_input_temp = ""

# ===============================
# üîπ CSS
# ===============================
st.markdown("""
<style>
.chat-container {height:60vh; overflow-y:auto; padding:10px; border-radius:12px; background:#f0f2f6; box-shadow: inset 0 0 10px #00000011;}
.user-msg {background-color:#DCF8C6; padding:10px 14px; border-radius:12px; margin:8px 0; text-align:right; max-width:80%; float:right; clear:both;}
.bot-msg {background-color:#ffffff; padding:10px 14px; border-radius:12px; margin:8px 0; border:1px solid #ddd; max-width:80%; float:left; clear:both;}
.timestamp {font-size:0.7em; color:gray; margin-top:2px;}
.typing {color: gray; font-style: italic;}
.input-container {display:flex; align-items: flex-start; gap:5px;}
.text-area {flex:1;}

/* C·ªôt tr√°i: ti√™u ƒë·ªÅ ƒë·∫πp */
.left-header {
    font-size: 1.5em;
    font-weight: bold;
    background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
    color: white;
    padding: 12px;
    border-radius: 10px;
    text-align: center;
    box-shadow: 0 0 10px #00000033;
    margin-bottom: 10px;
}

/* Hover effect cho checkbox labels */
div[role="checkbox"] > label:hover {
    background-color: #e0e8f5 !important;
    border-radius: 6px;
    padding: 2px 6px;
    transition: background-color 0.2s ease;
}
</style>
""", unsafe_allow_html=True)

# ===============================
# Layout
# ===============================
col_left, col_right = st.columns([1.4, 2.7])

# -----------------------
# C·ªôt tr√°i: ch∆∞∆°ng c·ªë ƒë·ªãnh, expander m·ª•c
# -----------------------
with col_left:
    st.markdown('<div class="left-header">üí¨ Chatbot Tri·∫øt h·ªçc M√°c - L√™nin</div>', unsafe_allow_html=True)
    st.info("‚ö†Ô∏è N·ªôi dung tr·∫£ l·ªùi c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c. H√£y ki·ªÉm tra k·ªπ **n·ªôi dung c√¢u tr·∫£ l·ªùi** v√† **ngu·ªìn tham kh·∫£o**.")
    selected_sections = []

    for ch, sections in chapter_structure.items():
        st.markdown(f"""
        <div style="
            background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
            padding: 8px 12px;
            border-radius: 8px;
            font-weight: bold;
            color: white;
            box-shadow: 0 0 15px #00000055;
            margin-bottom: 3px;
        ">{ch}</div>
        """, unsafe_allow_html=True)

        with st.expander("Hi·ªÉn th·ªã c√°c m·ª•c", expanded=False):
            for sec_name in sections:
                sec_selected = st.checkbox(
                    sec_name,
                    value=st.session_state.section_state.get(f"{ch}_{sec_name}", False),
                    key=f"{ch}_{sec_name}"
                )
                st.session_state.section_state[f"{ch}_{sec_name}"] = sec_selected
                if sec_selected:
                    selected_sections.append((ch, sec_name))

# -----------------------
# C·ªôt ph·∫£i: chat c·ªë ƒë·ªãnh
# -----------------------
chat_placeholder = col_right.container()
chat_area = chat_placeholder.empty()  # lu√¥n t·ªìn t·∫°i

# -----------------------
# H√†m render chat (Markdown -> HTML)
# -----------------------
def render_chat(extra_msg=None, typing=False):
    chat_html = '<div class="chat-container" id="chat-container">'
    for msg in st.session_state.chat_history:
        ts = msg.get("time", "")
        content_html = markdown.markdown(msg["content"], extensions=['extra'])
        if msg["role"] == "user":
            chat_html += f'<div class="user-msg">{content_html}<div class="timestamp">{ts}</div></div>'
        else:
            chat_html += f'<div class="bot-msg">{content_html}<div class="timestamp">{ts}</div></div>'
    if extra_msg and typing:
        extra_html = markdown.markdown(extra_msg, extensions=['extra'])
        chat_html += f'<div class="bot-msg typing">{extra_html}</div>'
    chat_html += '</div>'
    chat_area.markdown(chat_html, unsafe_allow_html=True)

# -----------------------
# üîπ G·ª≠i c√¢u ch√†o khi l·∫ßn ƒë·∫ßu truy c·∫≠p
# -----------------------
if "welcome_sent" not in st.session_state:
    st.session_state.chat_history.append({
        "role": "assistant",
        "content": "Ch√†o b·∫°n! T√¥i l√† chatbot Tri·∫øt h·ªçc M√°c - L√™nin. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i b·∫•t c·ª© c√¢u g√¨ li√™n quan ƒë·∫øn n·ªôi dung ƒë√£ ch·ªçn.",
        "time": datetime.now().strftime("%H:%M:%S")
    })
    st.session_state.welcome_sent = True

# Render chat ban ƒë·∫ßu
render_chat()

# -----------------------
# H√†m g·ª≠i c√¢u h·ªèi + AI tr·∫£ l·ªùi (gi·ªØ ng·ªØ c·∫£nh)
# -----------------------
def send_question():
    user_input = st.session_state.chat_input_temp.strip()
    if not user_input:
        return

    now = datetime.now().strftime("%H:%M:%S")
    st.session_state.chat_history.append({"role":"user","content":user_input,"time":now})
    st.session_state.chat_input_temp = ""  # reset input
    render_chat(extra_msg="AI ƒëang suy nghƒ©...", typing=True)

    # L·∫•y d·ªØ li·ªáu OCR trong v√πng ch·ªçn
    blocks = []
    MAX_CHARS = 20000
    char_count = 0

    for ch, sec in selected_sections:
        start, end = chapter_structure[ch][sec]
        # L·ªçc c√°c ƒëo·∫°n thu·ªôc trang t·ª´ start -> end
        section_texts = [p for p in ocr_data if start <= p["page"] + 1 <= end]
        for p in section_texts:
            true_page = p["page"] + 1
            text_piece = f"[{ch} ‚Äì {sec} ‚Äì Trang {true_page}]\n{p['text']}\n"
            if char_count + len(text_piece) > MAX_CHARS:
                break
            blocks.append(text_piece)
            char_count += len(text_piece)

    combined_text = "\n\n".join(blocks)

    # Chu·∫©n b·ªã messages ƒë·ªÉ AI gi·ªØ ng·ªØ c·∫£nh
    messages = [
        {"role": "system", "content":
            "B·∫°n l√† tr·ª£ l√Ω Tri·∫øt h·ªçc M√°c - L√™nin. D·ª±a ch·ªß y·∫øu tr√™n 'N·ªôi dung tham kh·∫£o' ƒë∆∞·ª£c cung c·∫•p, "
            "tr·∫£ l·ªùi c√¢u h·ªèi ng∆∞·ªùi d√πng. B·∫°n c√≥ th·ªÉ **suy lu·∫≠n nh·∫π, gi·∫£i th√≠ch, kh√°i qu√°t** t·ª´ d·ªØ li·ªáu tham kh·∫£o, "
            "nh∆∞ng KH√îNG th√™m th√¥ng tin ngo√†i d·ªØ li·ªáu OCR. "
            "Tr√¨nh b√†y Markdown ƒë·∫πp, d·ªÖ ƒë·ªçc: in ƒë·∫≠m, in nghi√™ng, danh s√°ch, xu·ªëng d√≤ng h·ª£p l√Ω. "
            "Khi ch·∫Øc ch·∫Øn, tr√≠ch ngu·ªìn: Ch∆∞∆°ng ‚Äì M·ª•c v√† s·ªë trang. "
            "N·∫øu th√¥ng tin ch·ªâ c√≥ th·ªÉ suy lu·∫≠n t·ª´ d·ªØ li·ªáu, h√£y gi·∫£i th√≠ch r√µ ƒë√≥ l√† k·∫øt lu·∫≠n d·ª±a tr√™n d·ªØ li·ªáu tham kh·∫£o. "
            "Tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng, tr·ª±c ti·∫øp, kh√¥ng lan man."
         }
    ]

    # Th√™m l·ªãch s·ª≠ chat v√†o messages
    for msg in st.session_state.chat_history:
        if msg["role"] == "user":
            messages.append({"role": "user", "content": msg["content"]})
        else:
            messages.append({"role": "assistant", "content": msg["content"]})

    # Th√™m c√¢u h·ªèi hi·ªán t·∫°i k√®m n·ªôi dung tham kh·∫£o
    messages.append({"role": "user", "content": f"C√¢u h·ªèi m·ªõi: {user_input}\nN·ªôi dung tham kh·∫£o:\n{combined_text}"})

    try:
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=messages,
            temperature=0.4,
        )
        answer = response.choices[0].message.content.strip()
    except Exception as e:
        answer = f"L·ªói khi g·ªçi DeepSeek API: {e}"

    # Typing effect t·ª´ng k√Ω t·ª±
    displayed = ""
    for c in answer:
        displayed += c
        render_chat(extra_msg=displayed, typing=True)
        time.sleep(0.01)

    st.session_state.chat_history.append({"role":"assistant","content":answer,"time":datetime.now().strftime("%H:%M:%S")})
    render_chat()


# -----------------------
# Input + n√∫t g·ª≠i
# -----------------------
with col_right:
    st.text_area(
        label="‚ö†Ô∏è N·ªôi dung tr·∫£ l·ªùi c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c. H√£y ki·ªÉm tra k·ªπ **n·ªôi dung c√¢u tr·∫£ l·ªùi** v√† **ngu·ªìn tham kh·∫£o**.",
        key="chat_input_temp",
        height=80,
        placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n ·ªü ƒë√¢y..."
    )
    st.button("G·ª≠i ‚úàÔ∏è", on_click=send_question)
